migrations:
  - from: currency/honkos/database-url
    to: currency/mysql/url
  - from: song/youtube/support
    to: song/youtube/enabled

types:
  remote/api-url:
    doc: Endpoint to use for sending API updates to. One is provided for free at `https://setbac.tv`.
    type: {id: string, optional: true}
  remote/enabled:
    doc: If remote updates are enabled.
    type: {id: bool}
  first-run:
    doc: Indicates whether the bot has run at least once.
    type: {id: bool}
  gtav/command-configs:
    doc: >
      **Experimental** support for command-specific configuration overrides.
      An example override looks like this: `{"name": "Wanted", "enabled": true, "cost": 10000, "cooldown": "5m"}`.
      [Available names](https://github.com/udoprog/setmod/blob/master/bot/src/module/gtav.rs#L208).
    type: {id: set, value: {id: raw}}
  gtav/enabled:
    doc: If the `!gtav` module is enabled.
    type: {id: bool}
  gtav/chat-prefix:
    doc: Prefix to use when announcing effects.
    type: {id: string}
  gtav/cooldown:
    doc: Global cooldown between each effect.
    type: {id: duration}
  gtav/punish-cooldown:
    doc: Punishment cooldown between each effect.
    type: {id: duration}
  gtav/reward-cooldown:
    doc: Reward cooldown between each effect.
    type: {id: duration}
  gtav/per-user-cooldown:
    doc: Per-user cooldown between each effect.
    type: {id: duration}
  gtav/per-command-cooldown:
    doc: Per-command cooldown between each effect.
    type: {id: duration}
  gtav/other%:
    doc: Other effect cost scaling.
    type: {id: percentage}
  gtav/punish%:
    doc: Punishment scaling.
    type: {id: percentage}
  gtav/reward%:
    doc: Reward cost scaling.
    type: {id: percentage}
  gtav/success-feedback:
    doc: If we should have chat feedback on successful commands.
    type: {id: bool}
  irc/sender-type:
    doc: How to send messages to chat.
    type:
      id: select
      value: {id: string}
      options:
        - {title: "Chat", value: "chat"}
        - {title: "NightBot (requires Authentication)", value: "nightbot"}
  irc/moderator-cooldown:
    doc: How long we must wait between each moderator action.
    type: {id: duration, optional: true}
  irc/startup-message:
    doc: Message to send when the bot starts up.
    type: {id: string, optional: true}
  irc/idle-detection/threshold:
    doc: How many messages must be received before the channel is no longer considered idle.
    type: {id: number}
  irc/viewer-reward%:
    doc: Scaling for viewer rewards.
    type: {id: percentage}
  irc/viewer-reward/enabled:
    doc: If viewer rewards are enabled. If enabled, this will award viewers 1 unit of stream currency for every minute of watch time.
    type: {id: bool}
  irc/viewer-reward/interval:
    doc: The interval at which we give out user rewards.
    type: {id: duration}
  irc/whitelisted-hosts:
    doc: Hosts that are whitelisted for linking to in chat.
    type: {id: set, value: {id: string}}
  irc/url-whitelist/enabled:
    doc: If URL whitelisting is enabled in chat.
    type: {id: bool}
  irc/bad-words/enabled:
    doc: If bad words filtering is enabled in chat (Experimental).
    type: {id: bool}
  irc/bad-words/path:
    doc: Filesystem location of the bad words dictionary to use.
    type: {id: string, optional: true}
  migration/aliases-migrated:
    doc: If aliases have been migrated from the configuration file.
    type: {id: bool}
  migration/whitelisted-hosts-migrated:
    doc: If whitelisted hosts have been migrated from the configuration file.
    type: {id: bool}
  migration/themes-migrated:
    doc: If themes have been migrated from the configuration file.
    type: {id: bool}
  player/fallback-uri:
    doc: The fallback URI (Spotify) to use when no other songs are queued up. Removing this setting causes the bot to use your library.
    type: {id: string, optional: true}
  player/duplicate-duration:
    doc: The minimum amount of time that has to have been passed to allow adding a song that has already been queued.
    type: {id: duration}
  player/detached:
    doc: If the player is detached, in that it can no longer control the music.
    type: {id: bool}
    scope: player/attach-detach
  player/song-switch-feedback:
    doc: Echo when the current song switches in chat.
    type: {id: bool}
  player/max-queue-length:
    doc: The maximum queue length permitted in the player.
    type: {id: number}
  player/max-songs-per-user:
    doc: The maximum number of songs that can be requested per user.
    type: {id: number}
  player/song-update-interval:
    doc: The interval at which song updates are visible. Used in the Overlay.
    type: {id: duration}
  player/spotify/volume:
    doc: Volume to use for the Spotify player.
    type: {id: percentage}
  player/spotify/volume-scale:
    doc: Scaling to apply to volume. A value of 50% would mean that that would effectively be the maximum volume.
    type: {id: percentage}
  player/spotify/device:
    doc: ID of the device configured for playback.
    type: {id: string, optional: true}
  player/youtube/volume:
    doc: Volume to use for the YouTube player.
    type: {id: percentage}
  player/youtube/volume-scale:
    doc: Scaling to apply to volume. A value of 50% would mean that that would effectively be the maximum volume.
    type: {id: percentage}
  player/song-file/enabled:
    doc: If file-based current song information is enabled.
    type: {id: bool}
  player/song-file/path:
    doc: The path to write the current song information to.
    type: {id: string, optional: true}
  player/song-file/update-interval:
    doc: How frequently the file is updated.
    type: {id: duration}
  player/song-file/template:
    doc: Template to use for current song.
    type: {id: text, optional: true}
  player/song-file/stopped-template:
    doc: Template to use when the player doesn't have any songs loaded.
    type: {id: text, optional: true}
  promotions/enabled:
    doc: If the `!promo` module is enabled.
    type: {id: bool}
  promotions/frequency:
    doc: The highest frequency at which promotions are posted.
    type: {id: duration}
  swearjar/enabled:
    doc: If the `!swearjar` module is enabled.
    type: {id: bool}
  swearjar/reward:
    doc: The amount of currency each user is rewarded by the `!swearjar` command.
    type: {id: number}
  swearjar/cooldown:
    doc: Minimum cooldown between each `!swearjar` invocation.
    type: {id: duration}
  secrets/oauth2/spotify/config:
    doc: OAuth 2.0 configuration for Spotify authentication.
    type: {id: "oauth2-config", optional: true}
    secret: true
  secrets/oauth2/spotify/token:
    doc: Stored token for Spotify authentication.
    type: {id: raw, optional: true}
    secret: true
  secrets/oauth2/twitch-bot/token:
    doc: Stored token for Twitch Bot authentication.
    type: {id: raw, optional: true}
    secret: true
  secrets/oauth2/twitch-streamer/token:
    doc: Stored token for Twitch Streamer authentication.
    type: {id: raw, optional: true}
    secret: true
  secrets/oauth2/youtube/token:
    doc: Stored token for YouTube authentication.
    type: {id: raw, optional: true}
    secret: true
  secrets/oauth2/nightbot/token:
    doc: Stored token for NightBot authentication.
    type: {id: raw, optional: true}
    secret: true
  song/enabled:
    doc: If the `!song` module is enabled.
    type: {id: bool}
  song/chat-feedback:
    doc: If song feedback is visible in chat or not.
    type: {id: bool}
  song/request-reward:
    doc: Fixed reward that anyone gets for requesting songs.
    type: {id: number}
  song/subscriber-only:
    doc: If only subscribers can request songs.
    type: {id: bool}
  song/spotify/enabled:
    doc: If we accept Spotify song requests.
    type: {id: bool}
  song/spotify/min-currency:
    doc: >
      The minimum amount of stream currency required to request Spotify songs.
      Setting this value to anything by `0` requires that stream currency is configured.
    type: {id: number}
  song/spotify/max-duration:
    doc: >
      The longest duration we will accept for a Spotify songs. Any longer will be capped.
      Remove this value to allow requests of any length.
    type: {id: duration, optional: true}
  song/spotify/subscriber-only:
    doc: >
      If only subscribers can request songs from Spotify.
      **Deprecated** in favor of `song/spotify` scope (see Authentication).
    type: {id: bool, optional: true}
  song/youtube/enabled:
    doc: If we accept YouTube song requests (Experimental).
    type: {id: bool}
  song/youtube/min-currency:
    doc: >
      The minimum amount of stream currency required to request YouTube songs.
      Setting this value to anything by `0` requires that stream currency is configured.
    type: {id: number}
  song/youtube/max-duration:
    doc: >
      The longest duration we will accept for a YouTube video. Any longer will be capped.
      Remove this value to allow requests of any length.
    type: {id: duration, optional: true}
  song/youtube/min-currency:
    doc: >
      The minimum amount of stream currency required to request YouTube songs.
      Remove this value to allow requests of any length.
    type: {id: number}
  song/youtube/subscriber-only:
    doc: >
      If only subscribers can request songs from YouTube.
      **Deprecated** in favor of `song/spotify` scope (see Authentication).
    type: {id: bool, optional: true}
  water/enabled:
    doc: If the `!water` module is enabled.
    type: {id: bool}
  water/cooldown:
    doc: Cooldown between each `!water` command.
    type: {id: duration}
  water/reward%:
    doc: Reward scaling for doing a water reminder.
    type: {id: percentage}
  countdown/enabled:
    doc: If the `!countdown` module is enabled.
    type: {id: bool}
  countdown/path:
    doc: The path used for writing the countdown.
    type: {id: string, optional: true}
  currency/type:
    doc: The type of the stream currency. Decides the backend implementation.
    type:
      id: select
      value: {id: string}
      options:
        - {title: "Built-In", value: "builtin"}
        - {title: "MySQL", value: "mysql"}
        - {title: "Honkos", value: "honkos"}
  currency/mysql/url:
    doc: >
      The database URL to connect to for the `mysql` or `honkos` backend.
      Expected: `mysql://<user>:<password>@<host>/<database>`.
    type:
      id: string
      optional: true
      placeholder: "mysql://<user>:<password>@<host>/<database>"
      format: {type: "regex", pattern: "^mysql:\\/\\/(.+:.+@)?.+/.+$"}
    secret: true
  currency/mysql/schema:
    doc: Custom schema to use for `mysql` type backends.
    type: {id: raw}
  currency/enabled:
    doc: If stream currency is enabled.
    type: {id: bool}
  currency/command-enabled:
    doc: If the `!<currency>` command is enabled.
    type: {id: bool}
  currency/name:
    doc: The name used for the current stream currency.
    type: {id: string, optional: true}
  currency/notify-rewards:
    doc: Send a global notification on viewer rewards.
    type: {id: bool}
  obs/url:
    doc: The URL to use when connecting to OBS.
    type: {id: string, optional: true}
  uptime/enabled:
    doc: If the `!uptime` command is enabled.
    type: {id: bool}
  game/enabled:
    doc: If the `!game` command is enabled.
    type: {id: bool}
  title/enabled:
    doc: If the `!title` command is enabled.
    type: {id: bool}
  afterstream/enabled:
    doc: If the `!afterstream` command is enabled.
    type: {id: bool}
  afterstream/cooldown:
    doc: Required cooldown between each `!afterstream` call.
    type: {id: duration}
  clip/enabled:
    doc: If the `!clip` command is enabled.
    type: {id: bool}
  clip/cooldown:
    doc: Required cooldown between each `!clip` call.
    type: {id: duration}
  8ball/enabled:
    doc: If the `!8ball` command is enabled.
    type: {id: bool}
  command/enabled:
    doc: If the `!command` command is enabled. It's used for custom command administration.
    type: {id: bool}
  speedrun/enabled:
    doc: If the `!speedrun` command is enabled.
    type: {id: bool}
  speedrun/top:
    doc: "How many top runs to fetch (default: 20)."
    type: {id: number}

  time/enabled:
    doc: If the `!time` command is enabled.
    type: {id: bool}
  time/timezone:
    doc: Time zone for the `!time` command.
    type: {id: "time-zone"}
  time/template:
    doc: Template to use as a response.
    type: {id: string}